// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model - Katılımcılar için
model User {
  id          String   @id @default(cuid())
  marathonId  String   @unique
  email       String   @unique
  password    String?
  fullName    String
  phone       String
  university  String
  department  String
  teamRole    TeamRole
  role        UserRole @default(PARTICIPANT)
  isActive    Boolean  @default(true)
  teamId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  teamLeader     Team?         @relation("TeamLeader")
  teamMembers    Team?         @relation("TeamMembers", fields: [teamId], references: [id])
  tasks          Task[]        @relation("UserTasks")
  presentations  Presentation[] @relation("UserPresentations")

  @@map("users")
}

// Admin model - Yöneticiler için
model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  fullName  String
  phone     String?
  role      UserRole @default(ADMIN)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

// MarathonId model - Marathon ID'leri için
model MarathonId {
  id        String    @id @default(cuid())
  marathonId String   @unique
  isUsed    Boolean   @default(false)
  usedAt    DateTime?
  usedBy    String?
  createdAt DateTime  @default(now())

  @@map("marathon_ids")
}

// Application model - Başvurular için
model Application {
  id              String            @id @default(cuid())
  fullName        String
  phone           String
  university      String
  department      String
  projectIdea     String
  youtubeVideo    String
  logicQuestion1  String
  logicQuestion2  String
  status          ApplicationStatus @default(PENDING)
  reviewedBy      String?
  reviewedAt      DateTime?
  notes           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@map("applications")
}

// Enums
enum TeamRole {
  LIDER
  TEKNIK_SORUMLU
  TASARIMCI
}

enum UserRole {
  PARTICIPANT
  ADMIN
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
  WAITLIST
}

// Announcement model - Duyurular için
model Announcement {
  id          String   @id @default(cuid())
  title       String
  summary     String
  content     String
  category    String
  date        String
  time        String
  pinned      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("announcements")
}

// Message model - Mesajlar için
model Message {
  id          String   @id @default(cuid())
  fromUserId  String
  toRole      String   // "admin", "mentor", "participant"
  subject     String
  body        String
  unread      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("messages")
}

// Team model - Takımlar için
model Team {
  id          String   @id @default(cuid())
  name        String
  leaderId    String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  leader      User     @relation("TeamLeader", fields: [leaderId], references: [id])
  members     User[]   @relation("TeamMembers")

  @@map("teams")
}

// Task model - Görevler için
model Task {
  id                String   @id @default(cuid())
  userId            String
  title             String
  description       String
  huaweiCloudAccount String
  uploadType        String   // "file" or "link"
  fileUrl           String?
  linkUrl           String?
  status            String   @default("pending") // "pending", "completed"
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User     @relation("UserTasks", fields: [userId], references: [id])

  @@map("tasks")
}

// Presentation model - Sunumlar için
model Presentation {
  id                String   @id @default(cuid())
  userId            String
  teamName          String
  memberNames       String
  title             String
  description       String
  uploadType        String   // "file" or "link"
  fileUrl           String?
  linkUrl           String?
  status            String   @default("pending") // "pending", "completed"
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User     @relation("UserPresentations", fields: [userId], references: [id])

  @@map("presentations")
}
